
Log opened at: Sat Dec 06 01:16:21 2014

This is ZANS. Version 0.3.1a. Built on Apr 12 1996, 16:02:39 U.S.A. CST.
Copyright (c) Xiaoping Jia, 1994-1996.

... Initializing.
... Loading Z mathematical tools library: math1.zbx

zans> load club.zbx
Parsing main file: club.zbx
... Type checking Free type definition: STUDENT. "club.zbx" Line 4
... Type checking Free type definition: CLUB_NAME. "club.zbx" Line 6
... Type checking Axiom box. "club.zbx" Lines 8-13
... Type checking Free type definition: REPORT. "club.zbx" Lines 15-16
... Type checking Schema box: Club. "club.zbx" Lines 18-27
    Pragma `init-schema', parameter: InitialClub
... Type checking Schema box: InitialClub. "club.zbx" Lines 32-38
... Type checking Schema box: JoinClub_Success. "club.zbx" Lines 47-58
... Type checking Schema box: JoinClub_Error_Already_Member. "club.zbx" Lines 64-70
... Type checking Schema box: JoinClub_Error_No_Space. "club.zbx" Lines 76-81
    Pragma `operation', parameter: JoinClub
... Type checking Schema definition: JoinClub. "club.zbx" Lines 88-89
... Type checking Schema box: LeaveClub_Success_Club_And_Committee. "club.zbx" Lines 96-107
... Type checking Schema box: LeaveClub_Success_Club. "club.zbx" Lines 112-123
... Type checking Schema definition: LeaveClub_Success. "club.zbx" Lines 128-129
... Type checking Schema box: LeaveClub_Error_Is_President. "club.zbx" Lines 133-139
... Type checking Schema box: LeaveClub_Error_Not_Member. "club.zbx" Lines 144-150
... Type checking Schema definition: LeaveClub_Error. "club.zbx" Lines 155-156
    Pragma `operation', parameter: LeaveClub
... Type checking Schema definition: LeaveClub. "club.zbx" Line 162
    Pragma `operation', parameter: CommitteeMembers
... Type checking Schema box: CommitteeMembers. "club.zbx" Lines 170-176
End of main file: club.zbx
... Print syntax tree in debug file.
... Print syntax tree in debug file. Done!
... Unparse syntax tree in debug file.
... Unparse syntax tree in debug file. Done!
... Generate type report in debug file.

zans> list

	Club
	InitialClub
	JoinClub_Success
	JoinClub_Error_Already_Member
	JoinClub_Error_No_Space
	JoinClub
	LeaveClub_Success_Club_And_Committee
	LeaveClub_Success_Club
	LeaveClub_Success
	LeaveClub_Error_Is_President
	LeaveClub_Error_Not_Member
	LeaveClub_Error
	LeaveClub
	CommitteeMembers

zans> animate
... Initialization.
    - Search for schema classification pragmas.
      pragma `init-schema', parameter: InitialClub
      pragma `operation', parameter: JoinClub
      pragma `operation', parameter: LeaveClub
      pragma `operation', parameter: CommitteeMembers
    - Analyze state schemas.
      No `state-schema' pragma found. Attempt auto-set.
        check schema: Club
        state schema found: Club
        check schema: JoinClub_Success
        check schema: JoinClub_Error_Already_Member
        check schema: JoinClub_Error_No_Space
        check schema: JoinClub
        check schema: LeaveClub_Success_Club_And_Committee
        check schema: LeaveClub_Success_Club
        check schema: LeaveClub_Success
        check schema: LeaveClub_Error_Is_President
        check schema: LeaveClub_Error_Not_Member
        check schema: LeaveClub_Error
        check schema: LeaveClub
        check schema: CommitteeMembers
      State schema analysis done.
    - Analyze initialization schemas.
        analyze init schemaInitialClub
        init schema: InitialClub -- ok.
      Initialization schema analysis done.
    - Analyze axiomatic definitions -- ok.
    - Analyze operation schemas.
        analyze operation schema: InitialClub -- ok.
        analyze operation schema: JoinClub -- ok.
        analyze operation schema: LeaveClub -- ok.
        analyze operation schema: CommitteeMembers -- ok.
      Operation schema analysis done.
... Initializing equivalence definitions.
... Initializing global names.
### Try branch #1
    *** Statements:
	MaximumClubSize := 25; 
	MaximumCommitteeSize := 10; 
    *** Exit guards: 
	MaximumCommitteeSize <= MaximumClubSize
	--> True
	MaximumCommitteeSize >= 0
	--> True
	MaximumClubSize >= 0
	--> True
### Branch #1 succeed.
MaximumCommitteeSize	: 10
MaximumClubSize	: 25
    Initialization schema InitialClub
... Execute schema: InitialClub
### Try branch #1
    *** Statements:
	name' := Chess; 
	members' := { Yehan, Praminda, Grainier, Anushka, Navin,
	  Nadil, Sanidu }; 
	committee' := { Yehan, Praminda, Navin }; 
	president' := Yehan; 
    *** Exit guards: 
	# members' <= MaximumClubSize
	--> True
	committee' subseteq members'
	--> True
	# committee' <= MaximumCommitteeSize
	--> True
	president' in committee'
	--> True
### Branch #1 succeed.
Schema: InitialClub
name': 	Chess
members': 	{Yehan, Praminda, Grainier, Anushka, Navin, Nadil, Sanidu}
committee': 	{Yehan, Praminda, Navin}
president': 	Yehan

anim> execute JoinClub
... Execute schema: JoinClub
Enter input arguments: 
newmember?	-> Maura
### Try branch #1
    *** Entry guards: 
	newmember? notin members
	--> True
	# members < MaximumClubSize
	--> True
	# members <= MaximumClubSize
	--> True
	committee subseteq members
	--> True
	# committee <= MaximumCommitteeSize
	--> True
	president in committee
	--> True
    *** Statements:
	members' := members || { newmember? }; 
	name' := name; 
	committee' := committee; 
	president' := president; 
	report! := Success; 
    *** Exit guards: 
	# members' <= MaximumClubSize
	--> True
	committee' subseteq members'
	--> True
	# committee' <= MaximumCommitteeSize
	--> True
	president' in committee'
	--> True
### Branch #1 succeed.
Schema: JoinClub
name: 	Chess
members: 	{Yehan, Praminda, Grainier, Anushka, Navin, Nadil, Sanidu}
committee: 	{Yehan, Praminda, Navin}
president: 	Yehan
name': 	Chess
members': 	{Yehan, Praminda, Grainier, Anushka, Navin, Nadil, Sanidu, Maura}
committee': 	{Yehan, Praminda, Navin}
president': 	Yehan
newmember?: 	Maura
report!: 	Success

anim> execute JoinClub
... Execute schema: JoinClub
Enter input arguments: 
newmember?	-> Maura
### Try branch #1
    *** Entry guards: 
	newmember? notin members
	--> False
### Branch #1 fail.
### Try branch #2
    *** Entry guards: 
	newmember? in members
	--> True
	# members <= MaximumClubSize
	--> True
	committee subseteq members
	--> True
	# committee <= MaximumCommitteeSize
	--> True
	president in committee
	--> True
    *** Statements:
	report! := Error_Already_Member; 
	name' := name; 
	members' := members; 
	committee' := committee; 
	president' := president; 
    *** Exit guards: 
	# members' <= MaximumClubSize
	--> True
	committee' subseteq members'
	--> True
	# committee' <= MaximumCommitteeSize
	--> True
	president' in committee'
	--> True
### Branch #2 succeed.
Schema: JoinClub
name: 	Chess
members: 	{Yehan, Praminda, Grainier, Anushka, Navin, Nadil, Sanidu, Maura}
committee: 	{Yehan, Praminda, Navin}
president: 	Yehan
name': 	Chess
members': 	{Yehan, Praminda, Grainier, Anushka, Navin, Nadil, Sanidu, Maura}
committee': 	{Yehan, Praminda, Navin}
president': 	Yehan
newmember?: 	Maura
report!: 	Error_Already_Member

anim> execute JoinClub
... Execute schema: JoinClub
Enter input arguments: 
newmember?	-> member9
### Try branch #1
    *** Entry guards: 
	newmember? notin members
	--> True
	# members < MaximumClubSize
	--> True
	# members <= MaximumClubSize
	--> True
	committee subseteq members
	--> True
	# committee <= MaximumCommitteeSize
	--> True
	president in committee
	--> True
    *** Statements:
	members' := members || { newmember? }; 
	name' := name; 
	committee' := committee; 
	president' := president; 
	report! := Success; 
    *** Exit guards: 
	# members' <= MaximumClubSize
	--> True
	committee' subseteq members'
	--> True
	# committee' <= MaximumCommitteeSize
	--> True
	president' in committee'
	--> True
### Branch #1 succeed.
Schema: JoinClub
name: 	Chess
members: 	{Yehan, Praminda, Grainier, Anushka, Navin, Nadil, Sanidu, Maura}
committee: 	{Yehan, Praminda, Navin}
president: 	Yehan
name': 	Chess
members': 	{Yehan, Praminda, Grainier, Anushka, Navin, Nadil, Sanidu, Maura, member9}
committee': 	{Yehan, Praminda, Navin}
president': 	Yehan
newmember?: 	member9
report!: 	Success

anim> execute JoinClub
... Execute schema: JoinClub
Enter input arguments: 
newmember?	-> member10
### Try branch #1
    *** Entry guards: 
	newmember? notin members
	--> True
	# members < MaximumClubSize
	--> True
	# members <= MaximumClubSize
	--> True
	committee subseteq members
	--> True
	# committee <= MaximumCommitteeSize
	--> True
	president in committee
	--> True
    *** Statements:
	members' := members || { newmember? }; 
	name' := name; 
	committee' := committee; 
	president' := president; 
	report! := Success; 
    *** Exit guards: 
	# members' <= MaximumClubSize
	--> True
	committee' subseteq members'
	--> True
	# committee' <= MaximumCommitteeSize
	--> True
	president' in committee'
	--> True
### Branch #1 succeed.
Schema: JoinClub
name: 	Chess
members: 	{Yehan, Praminda, Grainier, Anushka, Navin, Nadil, Sanidu, Maura, member9}
committee: 	{Yehan, Praminda, Navin}
president: 	Yehan
name': 	Chess
members': 	{Yehan, Praminda, Grainier, Anushka, Navin, Nadil, Sanidu, Maura, member9, member10}
committee': 	{Yehan, Praminda, Navin}
president': 	Yehan
newmember?: 	member10
report!: 	Success

anim> execute JoinClub
... Execute schema: JoinClub
Enter input arguments: 
newmember?	-> member11
### Try branch #1
    *** Entry guards: 
	newmember? notin members
	--> True
	# members < MaximumClubSize
	--> True
	# members <= MaximumClubSize
	--> True
	committee subseteq members
	--> True
	# committee <= MaximumCommitteeSize
	--> True
	president in committee
	--> True
    *** Statements:
	members' := members || { newmember? }; 
	name' := name; 
	committee' := committee; 
	president' := president; 
	report! := Success; 
    *** Exit guards: 
	# members' <= MaximumClubSize
	--> True
	committee' subseteq members'
	--> True
	# committee' <= MaximumCommitteeSize
	--> True
	president' in committee'
	--> True
### Branch #1 succeed.
Schema: JoinClub
name: 	Chess
members: 	{Yehan, Praminda, Grainier, Anushka, Navin, Nadil, Sanidu, Maura, member9, member10}
committee: 	{Yehan, Praminda, Navin}
president: 	Yehan
name': 	Chess
members': 	{Yehan, Praminda, Grainier, Anushka, Navin, Nadil, Sanidu, Maura, member9, member10, member11}
committee': 	{Yehan, Praminda, Navin}
president': 	Yehan
newmember?: 	member11
report!: 	Success

anim> execute JoinClub
... Execute schema: JoinClub
Enter input arguments: 
newmember?	-> member12
### Try branch #1
    *** Entry guards: 
	newmember? notin members
	--> True
	# members < MaximumClubSize
	--> True
	# members <= MaximumClubSize
	--> True
	committee subseteq members
	--> True
	# committee <= MaximumCommitteeSize
	--> True
	president in committee
	--> True
    *** Statements:
	members' := members || { newmember? }; 
	name' := name; 
	committee' := committee; 
	president' := president; 
	report! := Success; 
    *** Exit guards: 
	# members' <= MaximumClubSize
	--> True
	committee' subseteq members'
	--> True
	# committee' <= MaximumCommitteeSize
	--> True
	president' in committee'
	--> True
### Branch #1 succeed.
Schema: JoinClub
name: 	Chess
members: 	{Yehan, Praminda, Grainier, Anushka, Navin, Nadil, Sanidu, Maura, member9, member10, member11}
committee: 	{Yehan, Praminda, Navin}
president: 	Yehan
name': 	Chess
members': 	{Yehan, Praminda, Grainier, Anushka, Navin, Nadil, Sanidu, Maura, member9, member10, member11, member12}
committee': 	{Yehan, Praminda, Navin}
president': 	Yehan
newmember?: 	member12
report!: 	Success

anim> execute JoinClub
... Execute schema: JoinClub
Enter input arguments: 
newmember?	-> member13
### Try branch #1
    *** Entry guards: 
	newmember? notin members
	--> True
	# members < MaximumClubSize
	--> True
	# members <= MaximumClubSize
	--> True
	committee subseteq members
	--> True
	# committee <= MaximumCommitteeSize
	--> True
	president in committee
	--> True
    *** Statements:
	members' := members || { newmember? }; 
	name' := name; 
	committee' := committee; 
	president' := president; 
	report! := Success; 
    *** Exit guards: 
	# members' <= MaximumClubSize
	--> True
	committee' subseteq members'
	--> True
	# committee' <= MaximumCommitteeSize
	--> True
	president' in committee'
	--> True
### Branch #1 succeed.
Schema: JoinClub
name: 	Chess
members: 	{Yehan, Praminda, Grainier, Anushka, Navin, Nadil, Sanidu, Maura, member9, member10, member11, member12}
committee: 	{Yehan, Praminda, Navin}
president: 	Yehan
name': 	Chess
members': 	{Yehan, Praminda, Grainier, Anushka, Navin, Nadil, Sanidu, Maura, member9, member10, member11, member12, member13}
committee': 	{Yehan, Praminda, Navin}
president': 	Yehan
newmember?: 	member13
report!: 	Success

anim> execute JoinClub
... Execute schema: JoinClub
Enter input arguments: 
newmember?	-> member14
### Try branch #1
    *** Entry guards: 
	newmember? notin members
	--> True
	# members < MaximumClubSize
	--> True
	# members <= MaximumClubSize
	--> True
	committee subseteq members
	--> True
	# committee <= MaximumCommitteeSize
	--> True
	president in committee
	--> True
    *** Statements:
	members' := members || { newmember? }; 
	name' := name; 
	committee' := committee; 
	president' := president; 
	report! := Success; 
    *** Exit guards: 
	# members' <= MaximumClubSize
	--> True
	committee' subseteq members'
	--> True
	# committee' <= MaximumCommitteeSize
	--> True
	president' in committee'
	--> True
### Branch #1 succeed.
Schema: JoinClub
name: 	Chess
members: 	{Yehan, Praminda, Grainier, Anushka, Navin, Nadil, Sanidu, Maura, member9, member10, member11, member12, member13}
committee: 	{Yehan, Praminda, Navin}
president: 	Yehan
name': 	Chess
members': 	{Yehan, Praminda, Grainier, Anushka, Navin, Nadil, Sanidu, Maura, member9, member10, member11, member12, member13, member14}
committee': 	{Yehan, Praminda, Navin}
president': 	Yehan
newmember?: 	member14
report!: 	Success

anim> execute JoinClub
... Execute schema: JoinClub
Enter input arguments: 
newmember?	-> member15
### Try branch #1
    *** Entry guards: 
	newmember? notin members
	--> True
	# members < MaximumClubSize
	--> True
	# members <= MaximumClubSize
	--> True
	committee subseteq members
	--> True
	# committee <= MaximumCommitteeSize
	--> True
	president in committee
	--> True
    *** Statements:
	members' := members || { newmember? }; 
	name' := name; 
	committee' := committee; 
	president' := president; 
	report! := Success; 
    *** Exit guards: 
	# members' <= MaximumClubSize
	--> True
	committee' subseteq members'
	--> True
	# committee' <= MaximumCommitteeSize
	--> True
	president' in committee'
	--> True
### Branch #1 succeed.
Schema: JoinClub
name: 	Chess
members: 	{Yehan, Praminda, Grainier, Anushka, Navin, Nadil, Sanidu, Maura, member9, member10, member11, member12, member13, member14}
committee: 	{Yehan, Praminda, Navin}
president: 	Yehan
name': 	Chess
members': 	{Yehan, Praminda, Grainier, Anushka, Navin, Nadil, Sanidu, Maura, member9, member10, member11, member12, member13, member14, member15}
committee': 	{Yehan, Praminda, Navin}
president': 	Yehan
newmember?: 	member15
report!: 	Success

anim> execute JoinClub
... Execute schema: JoinClub
Enter input arguments: 
newmember?	-> member16
### Try branch #1
    *** Entry guards: 
	newmember? notin members
	--> True
	# members < MaximumClubSize
	--> True
	# members <= MaximumClubSize
	--> True
	committee subseteq members
	--> True
	# committee <= MaximumCommitteeSize
	--> True
	president in committee
	--> True
    *** Statements:
	members' := members || { newmember? }; 
	name' := name; 
	committee' := committee; 
	president' := president; 
	report! := Success; 
    *** Exit guards: 
	# members' <= MaximumClubSize
	--> True
	committee' subseteq members'
	--> True
	# committee' <= MaximumCommitteeSize
	--> True
	president' in committee'
	--> True
### Branch #1 succeed.
Schema: JoinClub
name: 	Chess
members: 	{Yehan, Praminda, Grainier, Anushka, Navin, Nadil, Sanidu, Maura, member9, member10, member11, member12, member13, member14, member15}
committee: 	{Yehan, Praminda, Navin}
president: 	Yehan
name': 	Chess
members': 	{Yehan, Praminda, Grainier, Anushka, Navin, Nadil, Sanidu, Maura, member9, member10, member11, member12, member13, member14, member15, member16}
committee': 	{Yehan, Praminda, Navin}
president': 	Yehan
newmember?: 	member16
report!: 	Success

anim> execute JoinClub
... Execute schema: JoinClub
Enter input arguments: 
newmember?	-> member17
### Try branch #1
    *** Entry guards: 
	newmember? notin members
	--> True
	# members < MaximumClubSize
	--> True
	# members <= MaximumClubSize
	--> True
	committee subseteq members
	--> True
	# committee <= MaximumCommitteeSize
	--> True
	president in committee
	--> True
    *** Statements:
	members' := members || { newmember? }; 
	name' := name; 
	committee' := committee; 
	president' := president; 
	report! := Success; 
    *** Exit guards: 
	# members' <= MaximumClubSize
	--> True
	committee' subseteq members'
	--> True
	# committee' <= MaximumCommitteeSize
	--> True
	president' in committee'
	--> True
### Branch #1 succeed.
Schema: JoinClub
name: 	Chess
members: 	{Yehan, Praminda, Grainier, Anushka, Navin, Nadil, Sanidu, Maura, member9, member10, member11, member12, member13, member14, member15, member16}
committee: 	{Yehan, Praminda, Navin}
president: 	Yehan
name': 	Chess
members': 	{Yehan, Praminda, Grainier, Anushka, Navin, Nadil, Sanidu, Maura, member9, member10, member11, member12, member13, member14, member15, member16, member17}
committee': 	{Yehan, Praminda, Navin}
president': 	Yehan
newmember?: 	member17
report!: 	Success

anim> execute JoinClub
... Execute schema: JoinClub
Enter input arguments: 
newmember?	-> member18
### Try branch #1
    *** Entry guards: 
	newmember? notin members
	--> True
	# members < MaximumClubSize
	--> True
	# members <= MaximumClubSize
	--> True
	committee subseteq members
	--> True
	# committee <= MaximumCommitteeSize
	--> True
	president in committee
	--> True
    *** Statements:
	members' := members || { newmember? }; 
	name' := name; 
	committee' := committee; 
	president' := president; 
	report! := Success; 
    *** Exit guards: 
	# members' <= MaximumClubSize
	--> True
	committee' subseteq members'
	--> True
	# committee' <= MaximumCommitteeSize
	--> True
	president' in committee'
	--> True
### Branch #1 succeed.
Schema: JoinClub
name: 	Chess
members: 	{Yehan, Praminda, Grainier, Anushka, Navin, Nadil, Sanidu, Maura, member9, member10, member11, member12, member13, member14, member15, member16, member17}
committee: 	{Yehan, Praminda, Navin}
president: 	Yehan
name': 	Chess
members': 	{Yehan, Praminda, Grainier, Anushka, Navin, Nadil, Sanidu, Maura, member9, member10, member11, member12, member13, member14, member15, member16, member17, member18}
committee': 	{Yehan, Praminda, Navin}
president': 	Yehan
newmember?: 	member18
report!: 	Success

anim> execute JoinClub
... Execute schema: JoinClub
Enter input arguments: 
newmember?	-> member19
### Try branch #1
    *** Entry guards: 
	newmember? notin members
	--> True
	# members < MaximumClubSize
	--> True
	# members <= MaximumClubSize
	--> True
	committee subseteq members
	--> True
	# committee <= MaximumCommitteeSize
	--> True
	president in committee
	--> True
    *** Statements:
	members' := members || { newmember? }; 
	name' := name; 
	committee' := committee; 
	president' := president; 
	report! := Success; 
    *** Exit guards: 
	# members' <= MaximumClubSize
	--> True
	committee' subseteq members'
	--> True
	# committee' <= MaximumCommitteeSize
	--> True
	president' in committee'
	--> True
### Branch #1 succeed.
Schema: JoinClub
name: 	Chess
members: 	{Yehan, Praminda, Grainier, Anushka, Navin, Nadil, Sanidu, Maura, member9, member10, member11, member12, member13, member14, member15, member16, member17, member18}
committee: 	{Yehan, Praminda, Navin}
president: 	Yehan
name': 	Chess
members': 	{Yehan, Praminda, Grainier, Anushka, Navin, Nadil, Sanidu, Maura, member9, member10, member11, member12, member13, member14, member15, member16, member17, member18, member19}
committee': 	{Yehan, Praminda, Navin}
president': 	Yehan
newmember?: 	member19
report!: 	Success

anim> execute JoinClub
... Execute schema: JoinClub
Enter input arguments: 
newmember?	-> member20
### Try branch #1
    *** Entry guards: 
	newmember? notin members
	--> True
	# members < MaximumClubSize
	--> True
	# members <= MaximumClubSize
	--> True
	committee subseteq members
	--> True
	# committee <= MaximumCommitteeSize
	--> True
	president in committee
	--> True
    *** Statements:
	members' := members || { newmember? }; 
	name' := name; 
	committee' := committee; 
	president' := president; 
	report! := Success; 
    *** Exit guards: 
	# members' <= MaximumClubSize
	--> True
	committee' subseteq members'
	--> True
	# committee' <= MaximumCommitteeSize
	--> True
	president' in committee'
	--> True
### Branch #1 succeed.
Schema: JoinClub
name: 	Chess
members: 	{Yehan, Praminda, Grainier, Anushka, Navin, Nadil, Sanidu, Maura, member9, member10, member11, member12, member13, member14, member15, member16, member17, member18, member19}
committee: 	{Yehan, Praminda, Navin}
president: 	Yehan
name': 	Chess
members': 	{Yehan, Praminda, Grainier, Anushka, Navin, Nadil, Sanidu, Maura, member9, member10, member11, member12, member13, member14, member15, member16, member17, member18, member19, member20}
committee': 	{Yehan, Praminda, Navin}
president': 	Yehan
newmember?: 	member20
report!: 	Success

anim> execute JoinClub
... Execute schema: JoinClub
Enter input arguments: 
newmember?	-> member21
### Try branch #1
    *** Entry guards: 
	newmember? notin members
	--> True
	# members < MaximumClubSize
	--> True
	# members <= MaximumClubSize
	--> True
	committee subseteq members
	--> True
	# committee <= MaximumCommitteeSize
	--> True
	president in committee
	--> True
    *** Statements:
	members' := members || { newmember? }; 
	name' := name; 
	committee' := committee; 
	president' := president; 
	report! := Success; 
    *** Exit guards: 
	# members' <= MaximumClubSize
	--> True
	committee' subseteq members'
	--> True
	# committee' <= MaximumCommitteeSize
	--> True
	president' in committee'
	--> True
### Branch #1 succeed.
Schema: JoinClub
name: 	Chess
members: 	{Yehan, Praminda, Grainier, Anushka, Navin, Nadil, Sanidu, Maura, member9, member10, member11, member12, member13, member14, member15, member16, member17, member18, member19, member20}
committee: 	{Yehan, Praminda, Navin}
president: 	Yehan
name': 	Chess
members': 	{Yehan, Praminda, Grainier, Anushka, Navin, Nadil, Sanidu, Maura, member9, member10, member11, member12, member13, member14, member15, member16, member17, member18, member19, member20, member21}
committee': 	{Yehan, Praminda, Navin}
president': 	Yehan
newmember?: 	member21
report!: 	Success

anim> execute JoinClub
... Execute schema: JoinClub
Enter input arguments: 
newmember?	-> member22
### Try branch #1
    *** Entry guards: 
	newmember? notin members
	--> True
	# members < MaximumClubSize
	--> True
	# members <= MaximumClubSize
	--> True
	committee subseteq members
	--> True
	# committee <= MaximumCommitteeSize
	--> True
	president in committee
	--> True
    *** Statements:
	members' := members || { newmember? }; 
	name' := name; 
	committee' := committee; 
	president' := president; 
	report! := Success; 
    *** Exit guards: 
	# members' <= MaximumClubSize
	--> True
	committee' subseteq members'
	--> True
	# committee' <= MaximumCommitteeSize
	--> True
	president' in committee'
	--> True
### Branch #1 succeed.
Schema: JoinClub
name: 	Chess
members: 	{Yehan, Praminda, Grainier, Anushka, Navin, Nadil, Sanidu, Maura, member9, member10, member11, member12, member13, member14, member15, member16, member17, member18, member19, member20, member21}
committee: 	{Yehan, Praminda, Navin}
president: 	Yehan
name': 	Chess
members': 	{Yehan, Praminda, Grainier, Anushka, Navin, Nadil, Sanidu, Maura, member9, member10, member11, member12, member13, member14, member15, member16, member17, member18, member19, member20, member21, member22}
committee': 	{Yehan, Praminda, Navin}
president': 	Yehan
newmember?: 	member22
report!: 	Success

anim> execute JoinClub
... Execute schema: JoinClub
Enter input arguments: 
newmember?	-> member23
### Try branch #1
    *** Entry guards: 
	newmember? notin members
	--> True
	# members < MaximumClubSize
	--> True
	# members <= MaximumClubSize
	--> True
	committee subseteq members
	--> True
	# committee <= MaximumCommitteeSize
	--> True
	president in committee
	--> True
    *** Statements:
	members' := members || { newmember? }; 
	name' := name; 
	committee' := committee; 
	president' := president; 
	report! := Success; 
    *** Exit guards: 
	# members' <= MaximumClubSize
	--> True
	committee' subseteq members'
	--> True
	# committee' <= MaximumCommitteeSize
	--> True
	president' in committee'
	--> True
### Branch #1 succeed.
Schema: JoinClub
name: 	Chess
members: 	{Yehan, Praminda, Grainier, Anushka, Navin, Nadil, Sanidu, Maura, member9, member10, member11, member12, member13, member14, member15, member16, member17, member18, member19, member20, member21, member22}
committee: 	{Yehan, Praminda, Navin}
president: 	Yehan
name': 	Chess
members': 	{Yehan, Praminda, Grainier, Anushka, Navin, Nadil, Sanidu, Maura, member9, member10, member11, member12, member13, member14, member15, member16, member17, member18, member19, member20, member21, member22, member23}
committee': 	{Yehan, Praminda, Navin}
president': 	Yehan
newmember?: 	member23
report!: 	Success

anim> execute JoinClub
... Execute schema: JoinClub
Enter input arguments: 
newmember?	-> member24
### Try branch #1
    *** Entry guards: 
	newmember? notin members
	--> True
	# members < MaximumClubSize
	--> True
	# members <= MaximumClubSize
	--> True
	committee subseteq members
	--> True
	# committee <= MaximumCommitteeSize
	--> True
	president in committee
	--> True
    *** Statements:
	members' := members || { newmember? }; 
	name' := name; 
	committee' := committee; 
	president' := president; 
	report! := Success; 
    *** Exit guards: 
	# members' <= MaximumClubSize
	--> True
	committee' subseteq members'
	--> True
	# committee' <= MaximumCommitteeSize
	--> True
	president' in committee'
	--> True
### Branch #1 succeed.
Schema: JoinClub
name: 	Chess
members: 	{Yehan, Praminda, Grainier, Anushka, Navin, Nadil, Sanidu, Maura, member9, member10, member11, member12, member13, member14, member15, member16, member17, member18, member19, member20, member21, member22, member23}
committee: 	{Yehan, Praminda, Navin}
president: 	Yehan
name': 	Chess
members': 	{Yehan, Praminda, Grainier, Anushka, Navin, Nadil, Sanidu, Maura, member9, member10, member11, member12, member13, member14, member15, member16, member17, member18, member19, member20, member21, member22, member23, member24}
committee': 	{Yehan, Praminda, Navin}
president': 	Yehan
newmember?: 	member24
report!: 	Success

anim> execute JoinClub
... Execute schema: JoinClub
Enter input arguments: 
newmember?	-> member25
### Try branch #1
    *** Entry guards: 
	newmember? notin members
	--> True
	# members < MaximumClubSize
	--> True
	# members <= MaximumClubSize
	--> True
	committee subseteq members
	--> True
	# committee <= MaximumCommitteeSize
	--> True
	president in committee
	--> True
    *** Statements:
	members' := members || { newmember? }; 
	name' := name; 
	committee' := committee; 
	president' := president; 
	report! := Success; 
    *** Exit guards: 
	# members' <= MaximumClubSize
	--> True
	committee' subseteq members'
	--> True
	# committee' <= MaximumCommitteeSize
	--> True
	president' in committee'
	--> True
### Branch #1 succeed.
Schema: JoinClub
name: 	Chess
members: 	{Yehan, Praminda, Grainier, Anushka, Navin, Nadil, Sanidu, Maura, member9, member10, member11, member12, member13, member14, member15, member16, member17, member18, member19, member20, member21, member22, member23, member24}
committee: 	{Yehan, Praminda, Navin}
president: 	Yehan
name': 	Chess
members': 	{Yehan, Praminda, Grainier, Anushka, Navin, Nadil, Sanidu, Maura, member9, member10, member11, member12, member13, member14, member15, member16, member17, member18, member19, member20, member21, member22, member23, member24, member25}
committee': 	{Yehan, Praminda, Navin}
president': 	Yehan
newmember?: 	member25
report!: 	Success

anim> execute JoinClub
... Execute schema: JoinClub
Enter input arguments: 
newmember?	-> member26
### Try branch #1
    *** Entry guards: 
	newmember? notin members
	--> True
	# members < MaximumClubSize
	--> False
### Branch #1 fail.
### Try branch #2
    *** Entry guards: 
	newmember? in members
	--> False
### Branch #2 fail.
### Try branch #3
    *** Entry guards: 
	# members = MaximumClubSize
	--> True
	# members <= MaximumClubSize
	--> True
	committee subseteq members
	--> True
	# committee <= MaximumCommitteeSize
	--> True
	president in committee
	--> True
    *** Statements:
	report! := Error_No_Space; 
	name' := name; 
	members' := members; 
	committee' := committee; 
	president' := president; 
    *** Exit guards: 
	# members' <= MaximumClubSize
	--> True
	committee' subseteq members'
	--> True
	# committee' <= MaximumCommitteeSize
	--> True
	president' in committee'
	--> True
### Branch #3 succeed.
Schema: JoinClub
name: 	Chess
members: 	{Yehan, Praminda, Grainier, Anushka, Navin, Nadil, Sanidu, Maura, member9, member10, member11, member12, member13, member14, member15, member16, member17, member18, member19, member20, member21, member22, member23, member24, member25}
committee: 	{Yehan, Praminda, Navin}
president: 	Yehan
name': 	Chess
members': 	{Yehan, Praminda, Grainier, Anushka, Navin, Nadil, Sanidu, Maura, member9, member10, member11, member12, member13, member14, member15, member16, member17, member18, member19, member20, member21, member22, member23, member24, member25}
committee': 	{Yehan, Praminda, Navin}
president': 	Yehan
newmember?: 	member26
report!: 	Error_No_Space

anim> execute LeaveClub
... Execute schema: LeaveClub
Enter input arguments: 
leavingmember?	-> Navin
### Try branch #1
    *** Entry guards: 
	leavingmember? in committee
	--> True
	leavingmember? /= president
	--> True
	# members <= MaximumClubSize
	--> True
	committee subseteq members
	--> True
	# committee <= MaximumCommitteeSize
	--> True
	president in committee
	--> True
    *** Statements:
	committee' := committee \ { leavingmember? }; 
	members' := members \ { leavingmember? }; 
	name' := name; 
	president' := president; 
	report! := Success; 
    *** Exit guards: 
	# members' <= MaximumClubSize
	--> True
	committee' subseteq members'
	--> True
	# committee' <= MaximumCommitteeSize
	--> True
	president' in committee'
	--> True
### Branch #1 succeed.
Schema: LeaveClub
name: 	Chess
members: 	{Yehan, Praminda, Grainier, Anushka, Navin, Nadil, Sanidu, Maura, member9, member10, member11, member12, member13, member14, member15, member16, member17, member18, member19, member20, member21, member22, member23, member24, member25}
committee: 	{Yehan, Praminda, Navin}
president: 	Yehan
name': 	Chess
members': 	{Yehan, Praminda, Grainier, Anushka, Nadil, Sanidu, Maura, member9, member10, member11, member12, member13, member14, member15, member16, member17, member18, member19, member20, member21, member22, member23, member24, member25}
committee': 	{Yehan, Praminda}
president': 	Yehan
leavingmember?: 	Navin
report!: 	Success

anim> execute LeaveClub
... Execute schema: LeaveClub
Enter input arguments: 
leavingmember?	-> Maura
### Try branch #1
    *** Entry guards: 
	leavingmember? in committee
	--> False
### Branch #1 fail.
### Try branch #2
    *** Entry guards: 
	leavingmember? notin committee
	--> True
	leavingmember? in members
	--> True
	# members <= MaximumClubSize
	--> True
	committee subseteq members
	--> True
	# committee <= MaximumCommitteeSize
	--> True
	president in committee
	--> True
    *** Statements:
	members' := members \ { leavingmember? }; 
	name' := name; 
	committee' := committee; 
	president' := president; 
	report! := Success; 
    *** Exit guards: 
	# members' <= MaximumClubSize
	--> True
	committee' subseteq members'
	--> True
	# committee' <= MaximumCommitteeSize
	--> True
	president' in committee'
	--> True
### Branch #2 succeed.
Schema: LeaveClub
name: 	Chess
members: 	{Yehan, Praminda, Grainier, Anushka, Nadil, Sanidu, Maura, member9, member10, member11, member12, member13, member14, member15, member16, member17, member18, member19, member20, member21, member22, member23, member24, member25}
committee: 	{Yehan, Praminda}
president: 	Yehan
name': 	Chess
members': 	{Yehan, Praminda, Grainier, Anushka, Nadil, Sanidu, member9, member10, member11, member12, member13, member14, member15, member16, member17, member18, member19, member20, member21, member22, member23, member24, member25}
committee': 	{Yehan, Praminda}
president': 	Yehan
leavingmember?: 	Maura
report!: 	Success

anim> execute LeaveClub
... Execute schema: LeaveClub
Enter input arguments: 
leavingmember?	-> Yehan
### Try branch #1
    *** Entry guards: 
	leavingmember? in committee
	--> True
	leavingmember? /= president
	--> False
### Branch #1 fail.
### Try branch #2
    *** Entry guards: 
	leavingmember? notin committee
	--> False
### Branch #2 fail.
### Try branch #3
    *** Entry guards: 
	leavingmember? = president
	--> True
	# members <= MaximumClubSize
	--> True
	committee subseteq members
	--> True
	# committee <= MaximumCommitteeSize
	--> True
	president in committee
	--> True
    *** Statements:
	report! := Error_Is_President; 
	name' := name; 
	members' := members; 
	committee' := committee; 
	president' := president; 
    *** Exit guards: 
	# members' <= MaximumClubSize
	--> True
	committee' subseteq members'
	--> True
	# committee' <= MaximumCommitteeSize
	--> True
	president' in committee'
	--> True
### Branch #3 succeed.
Schema: LeaveClub
name: 	Chess
members: 	{Yehan, Praminda, Grainier, Anushka, Nadil, Sanidu, member9, member10, member11, member12, member13, member14, member15, member16, member17, member18, member19, member20, member21, member22, member23, member24, member25}
committee: 	{Yehan, Praminda}
president: 	Yehan
name': 	Chess
members': 	{Yehan, Praminda, Grainier, Anushka, Nadil, Sanidu, member9, member10, member11, member12, member13, member14, member15, member16, member17, member18, member19, member20, member21, member22, member23, member24, member25}
committee': 	{Yehan, Praminda}
president': 	Yehan
leavingmember?: 	Yehan
report!: 	Error_Is_President

anim> execute LeaveClub
... Execute schema: LeaveClub
Enter input arguments: 
leavingmember?	-> someone
### Try branch #1
    *** Entry guards: 
	leavingmember? in committee
	--> False
### Branch #1 fail.
### Try branch #2
    *** Entry guards: 
	leavingmember? notin committee
	--> True
	leavingmember? in members
	--> False
### Branch #2 fail.
### Try branch #3
    *** Entry guards: 
	leavingmember? = president
	--> False
### Branch #3 fail.
### Try branch #4
    *** Entry guards: 
	leavingmember? notin members
	--> True
	# members <= MaximumClubSize
	--> True
	committee subseteq members
	--> True
	# committee <= MaximumCommitteeSize
	--> True
	president in committee
	--> True
    *** Statements:
	report! := Error_Not_Member; 
	name' := name; 
	members' := members; 
	committee' := committee; 
	president' := president; 
    *** Exit guards: 
	# members' <= MaximumClubSize
	--> True
	committee' subseteq members'
	--> True
	# committee' <= MaximumCommitteeSize
	--> True
	president' in committee'
	--> True
### Branch #4 succeed.
Schema: LeaveClub
name: 	Chess
members: 	{Yehan, Praminda, Grainier, Anushka, Nadil, Sanidu, member9, member10, member11, member12, member13, member14, member15, member16, member17, member18, member19, member20, member21, member22, member23, member24, member25}
committee: 	{Yehan, Praminda}
president: 	Yehan
name': 	Chess
members': 	{Yehan, Praminda, Grainier, Anushka, Nadil, Sanidu, member9, member10, member11, member12, member13, member14, member15, member16, member17, member18, member19, member20, member21, member22, member23, member24, member25}
committee': 	{Yehan, Praminda}
president': 	Yehan
leavingmember?: 	someone
report!: 	Error_Not_Member

anim> execute CommitteeMembers
... Execute schema: CommitteeMembers
### Try branch #1
    *** Entry guards: 
	# members <= MaximumClubSize
	--> True
	committee subseteq members
	--> True
	# committee <= MaximumCommitteeSize
	--> True
	president in committee
	--> True
    *** Statements:
	committeemembers! := committee; 
	report! := Success; 
	name' := name; 
	members' := members; 
	committee' := committee; 
	president' := president; 
    *** Exit guards: 
	# members' <= MaximumClubSize
	--> True
	committee' subseteq members'
	--> True
	# committee' <= MaximumCommitteeSize
	--> True
	president' in committee'
	--> True
### Branch #1 succeed.
Schema: CommitteeMembers
name: 	Chess
members: 	{Yehan, Praminda, Grainier, Anushka, Nadil, Sanidu, member9, member10, member11, member12, member13, member14, member15, member16, member17, member18, member19, member20, member21, member22, member23, member24, member25}
committee: 	{Yehan, Praminda}
president: 	Yehan
name': 	Chess
members': 	{Yehan, Praminda, Grainier, Anushka, Nadil, Sanidu, member9, member10, member11, member12, member13, member14, member15, member16, member17, member18, member19, member20, member21, member22, member23, member24, member25}
committee': 	{Yehan, Praminda}
president': 	Yehan
committeemembers!: 	{Yehan, Praminda}
report!: 	Success

anim> 